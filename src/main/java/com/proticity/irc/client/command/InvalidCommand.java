package com.proticity.irc.client.command;

import reactor.util.annotation.NonNull;

import java.util.Optional;
import java.util.function.Function;

/**
 * A special command representing any invalid or unparsable command received from the server.
 *
 * This command indicates that the content could not be parsed even to a general command, i.e. it does not confirm to
 * the IRC specification or any extension known to this library. An invalid command typically should be ignored by the
 * client application, but logged in some way.
 *
 * By default when {@link com.proticity.irc.client.parser.IrcInput} encounters an error during processing of input it
 * will emit an error. In cases where it is necessary to handle the input without terminating the pipeline this command
 * can be used, such as via {@link reactor.core.publisher.Flux#onErrorResume(Function)} and building an
 * InvalidCommand to be returned.
 */
public class InvalidCommand extends IrcCommand {
    private String input;
    private Exception error;

    /**
     * Create an invalid command for a given input string.
     * @param input the invalid input.
     */
    public InvalidCommand(String input) {
        this.input = input;
    }

    /**
     * Create an invalid command for a given input string and error.
     * @param input the invalid input.
     * @param error the error generated by the input.
     */
    public InvalidCommand(String input, Exception error) {
        this(input);
        this.error = error;
        setCommand("INVALID");
    }

    @Override
    @NonNull
    public String toString() {
        return "Invalid command: " + getInput();
    }

    /**
     * Returns the invalid input that created the command.
     * @return The invalid input that created the command.
     */
    @NonNull
    public String getInput() {
        return input;
    }

    /**
     * Returns the error the invalid input caused.
     * @return The error the invalid input caused.
     */
    @NonNull
    public Optional<Exception> getError() {
        return Optional.ofNullable(error);
    }
}
