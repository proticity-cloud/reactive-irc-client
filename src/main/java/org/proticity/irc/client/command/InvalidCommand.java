/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2019 John Stewart.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.proticity.irc.client.command;

import java.util.Optional;
import java.util.function.Function;

import org.proticity.irc.client.parser.IrcInput;
import reactor.util.annotation.NonNull;

/**
 * A special command representing any invalid or unparsable command received from the server.
 *
 * This command indicates that the content could not be parsed even to a general command, i.e. it does not confirm to
 * the IRC specification or any extension known to this library. An invalid command typically should be ignored by the
 * client application, but logged in some way.
 *
 * By default when {@link IrcInput} encounters an error during processing of input it
 * will emit an error. In cases where it is necessary to handle the input without terminating the pipeline this command
 * can be used, such as via {@link reactor.core.publisher.Flux#onErrorResume(Function)} and building an
 * InvalidCommand to be returned.
 */
public class InvalidCommand extends IrcCommand {
    private String input;
    private Exception error;

    /**
     * Create an invalid command for a given input string.
     * @param input the invalid input.
     */
    public InvalidCommand(String input) {
        this.input = input;
    }

    /**
     * Create an invalid command for a given input string and error.
     * @param input the invalid input.
     * @param error the error generated by the input.
     */
    public InvalidCommand(String input, Exception error) {
        this(input);
        this.error = error;
        setCommand("INVALID");
    }

    @Override
    @NonNull
    public String toString() {
        return "Invalid command: " + getInput();
    }

    /**
     * Returns the invalid input that created the command.
     * @return The invalid input that created the command.
     */
    @NonNull
    public String getInput() {
        return input;
    }

    /**
     * Returns the error the invalid input caused.
     * @return The error the invalid input caused.
     */
    @NonNull
    public Optional<Exception> getError() {
        return Optional.ofNullable(error);
    }
}
